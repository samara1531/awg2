name: off Build AmneziaWG from cache

on:
  workflow_dispatch:
    inputs:
      openwrt_version:
        description: "OpenWrt version"
        type: string
        required: true
        default: "23.05.6"
      openwrt_arch:
        description: "OpenWrt arch"
        type: string
        required: true
        default: "aarch64_generic"
      openwrt_target:
        description: "OpenWrt target"
        type: string
        required: true
        default: "rockchip"
      openwrt_subtarget:
        description: "OpenWrt subtarget"
        type: string
        required: true
        default: "armv8"
      compile_kmod:
        description: "Compile kernel module implementation"
        type: boolean
        required: true
        default: true
      compile_go:
        description: "Compile Go implementation"
        type: boolean
        required: true
        default: true
      branch_go:
        description: "Branch for amneziawg-go"
        type: string
        required: false
        default: "main"
      branch_tools:
        description: "Branch for amneziawg-tools"
        type: string
        required: false
        default: "main"
      branch_kmod:
        description: "Branch for kmod-amneziawg"
        type: string
        required: false
        default: "feature/awg2"

jobs:
  build-amneziawg:
    name: "Build AmneziaWG for OpenWrt: ${{ inputs.openwrt_version }} - ${{ inputs.openwrt_arch }} - ${{ inputs.openwrt_target }}/${{ inputs.openwrt_subtarget }}"
    runs-on: ubuntu-22.04
    defaults:
      run:
        shell: bash
    steps:
    - name: Checkout OpenWrt repository
      uses: actions/checkout@v5
      with:
        path: openwrt
        repository: openwrt/openwrt
        ref: ${{ inputs.openwrt_version == 'SNAPSHOT' && 'master' || format('v{0}', inputs.openwrt_version) }}
        fetch-depth: 0

    - name: Checkout amneziawg-openwrt repo
      uses: actions/checkout@v5
      with:
        path: amneziawg-openwrt
        repository: kozhini/amneziawg-openwrt
        ref: main
        fetch-depth: 0

    - name: Copy AmneziaWG packages into OpenWrt tree
      run: |
        set -e -x
        cp -r amneziawg-openwrt/amneziawg-go openwrt/package/
        cp -r amneziawg-openwrt/amneziawg-tools openwrt/package/
        cp -r amneziawg-openwrt/luci-proto-amneziawg openwrt/package/
        cp -r amneziawg-openwrt/kmod-amneziawg openwrt/package/

    - name: Update Makefiles to latest commits
      run: |
        set -e -x
        TODAY=$(date +%Y%m%d)

        for PKG in amneziawg-go amneziawg-tools kmod-amneziawg; do
          cd "openwrt/package/$PKG"
          MF="Makefile"
          if [ -f "$MF" ]; then
            REPO_URL=$(grep -E "^PKG_SOURCE_URL.*=" "$MF" | sed -E 's/.*= *//')

            # Определяем ветку по input или default
            if [ "$PKG" = "amneziawg-go" ]; then
              BRANCH="${{ inputs.branch_go }}"
            elif [ "$PKG" = "amneziawg-tools" ]; then
              BRANCH="${{ inputs.branch_tools }}"
            else
              BRANCH="${{ inputs.branch_kmod }}"
            fi

            echo "🔄 Updating $PKG from $REPO_URL ($BRANCH)"
            LATEST_COMMIT=$(git ls-remote "$REPO_URL" $BRANCH | cut -f1)

            TMPFILE=$(mktemp)
            curl -L "$REPO_URL/archive/$LATEST_COMMIT.tar.gz" -o "$TMPFILE"
            LATEST_HASH=$(sha256sum "$TMPFILE" | awk '{print $1}')
            rm -f "$TMPFILE"

            sed -i "s/^PKG_SOURCE_VERSION:=.*/PKG_SOURCE_VERSION:=$LATEST_COMMIT/" "$MF"
            sed -i "s/^PKG_MIRROR_HASH:=.*/PKG_MIRROR_HASH:=$LATEST_HASH/" "$MF"
            sed -i "s/^PKG_VERSION:=.*/PKG_VERSION:=1.0.$TODAY/" "$MF"

            echo "✅ $MF updated:"
            grep -E "PKG_VERSION|PKG_SOURCE_VERSION|PKG_MIRROR_HASH" "$MF" || true
          else
            echo "❌ Makefile not found at path openwrt/package/$PKG/$MF"
          fi
          cd - >/dev/null
        done

    - name: Restore cached tools and kernel
      uses: actions/cache/restore@v4
      with:
        key: ${{ runner.os }}-openwrt-cache-toolchain-kernel-${{ inputs.openwrt_version }}-${{ inputs.openwrt_arch }}-${{ inputs.openwrt_target }}-${{ inputs.openwrt_subtarget }}
        fail-on-cache-miss: true
        path: |
          openwrt/.config
          openwrt/.config.old
          openwrt/feeds.conf.default
          openwrt/bin/**
          openwrt/build_dir/**
          openwrt/dl/**
          openwrt/feeds/**
          openwrt/package/**
          openwrt/staging_dir/**
          openwrt/tmp/**

    - name: Compile AmneziaWG packages
      env:
        compile_kmod: ${{ inputs.compile_kmod }}
        compile_go: ${{ inputs.compile_go }}
      run: |
        set -e -x
        cd openwrt
        if [ "${{ env.compile_kmod }}" = "true" ]; then
          make package/kmod-amneziawg/{clean,download,prepare,compile} -j $(nproc)
        fi
        if [ "${{ env.compile_go }}" = "true" ]; then
          make package/amneziawg-go/{clean,download,prepare,compile} -j $(nproc)
        fi
        make package/luci-proto-amneziawg/{clean,download,prepare,compile} -j $(nproc)
        make package/amneziawg-tools/{clean,download,prepare,compile} -j $(nproc)

    - name: Prepare artifacts
      env:
        compile_kmod: ${{ inputs.compile_kmod }}
      run: |
        set -e -x
        mkdir awgrelease
        echo "vermagic=$(cat openwrt/build_dir/target-${{ inputs.openwrt_arch }}*/linux-${{ inputs.openwrt_target }}_${{ inputs.openwrt_subtarget }}/linux-*/.vermagic)" > awgrelease/vermagic
        if [ "${{ env.compile_kmod }}" = "true" ]; then
          find "openwrt/bin/targets/${{ inputs.openwrt_target }}/${{ inputs.openwrt_subtarget }}/packages" -maxdepth 1 -type f -name 'kmod-amneziawg*' -exec cp {} awgrelease \;
        fi
        find "openwrt/bin/packages/${{ inputs.openwrt_arch }}/awgopenwrt" -maxdepth 1 -type f \( -name '*.ipk' -o -name '*.apk' \) -exec cp {} awgrelease \;

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: amneziawg-${{ inputs.openwrt_version }}_${{ inputs.openwrt_arch }}_${{ inputs.openwrt_target }}_${{ inputs.openwrt_subtarget }}
        path: awgrelease/*
