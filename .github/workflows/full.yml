name: Build AmneziaWG full

on:
  workflow_dispatch:
    inputs:
      openwrt_version:
        description: "OpenWrt version"
        type: string
        required: true
        default: "23.05.6"
      amneziawg_version:
        description: "AmneziaWG version"
        type: string
        required: true
        default: "main"
      openwrt_arch:
        description: "OpenWrt arch"
        type: string
        required: true
        default: "aarch64_generic"
      openwrt_target:
        description: "OpenWrt target"
        type: string
        required: true
        default: "rockchip"
      openwrt_subtarget:
        description: "OpenWrt subtarget"
        type: string
        required: true
        default: "armv8"
      update_go:
        description: "Update Go version"
        type: boolean
        required: true
        default: true

jobs:
  build-toolchain-cache:
    name: "Build AmneziaWG packages for OpenWrt: ${{ inputs.openwrt_version }} - ${{ inputs.openwrt_arch }} - ${{ inputs.openwrt_target }}/${{ inputs.openwrt_subtarget }}"
    runs-on: ubuntu-22.04
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout YAAWG repository
        uses: actions/checkout@v5
        with:
          path: amneziawg
          ref: ${{ inputs.amneziawg_version }}
          fetch-depth: 0

      - name: Checkout OpenWrt repository
        uses: actions/checkout@v5
        with:
          path: openwrt
          repository: immortalwrt/immortalwrt
          ref: ${{ inputs.openwrt_version == 'SNAPSHOT' && 'master' || format('v{0}', inputs.openwrt_version) }}
          fetch-depth: 0

      - name: Checkout ImmortalWrt Packages repository
        if: ${{ inputs.update_go }}
        uses: actions/checkout@v5
        with:
          path: packages
          repository: immortalwrt/packages
          fetch-depth: 0

      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-pyelftools

      - name: Update feeds
        run: |
          set -e -x
          cd openwrt
          echo "src-cpy awgopenwrt ../amneziawg" >> feeds.conf.default
          ./scripts/feeds update -a
          if [ "${{ inputs.openwrt_version }}" = "SNAPSHOT" ]; then
            base_url="https://downloads.immortalwrt.org/snapshots/targets/${{ inputs.openwrt_target }}/${{ inputs.openwrt_subtarget }}"
          else
            base_url="https://downloads.immortalwrt.org/releases/${{ inputs.openwrt_version }}/targets/${{ inputs.openwrt_target }}/${{ inputs.openwrt_subtarget }}"
          fi
          curl -fsL "$base_url/config.buildinfo" > .config
          echo "CONFIG_PACKAGE_amneziawg-go=y" >> .config
          echo "CONFIG_PACKAGE_amneziawg-tools=y" >> .config
          echo "CONFIG_PACKAGE_luci-proto-amneziawg=y" >> .config

      - name: Update Go version
        if: ${{ inputs.update_go }}
        run: |
          set -e -x
          rm -r openwrt/feeds/packages/lang/golang
          cp -r packages/lang/golang openwrt/feeds/packages/lang

      - name: Build toolchain and kernel
        run: |
          set -e -x
          cd openwrt
          ./scripts/feeds install -a
          make defconfig
          make tools/install -j $(nproc)
          make toolchain/install -j $(nproc)
          make target/linux/compile -j $(nproc)
          export LC_ALL=C
          for deadlink in $(find . -follow -type l -printf "" 2>&1 | sed -e "s/find: '\(.*\)': Too many levels of symbolic links.*/\1/"); do
            echo "Deleting dead link: ${deadlink}"
            rm -f "${deadlink}"
          done

      - name: Copy AmneziaWG packages into OpenWrt tree
        run: |
          set -e -x
          cp -r amneziawg-openwrt/amneziawg-go openwrt/package/
          cp -r amneziawg-openwrt/amneziawg-tools openwrt/package/
          cp -r amneziawg-openwrt/luci-proto-amneziawg openwrt/package/

      - name: Update AmneziaWG Makefiles
        run: |
          TODAY=$(date +%Y%m%d)
          for PKG in amneziawg-go amneziawg-tools; do
            cd "openwrt/package/$PKG"
            MF="Makefile"
            if [ -f "$MF" ]; then
              REPO_URL=$(grep -E "^PKG_SOURCE_URL.*=" "$MF" | sed -E 's/.*= *//')
              if [ "$PKG" = "amneziawg-go" ]; then
                BRANCH="${{ inputs.branch_go }}"
              else
                BRANCH="${{ inputs.branch_tools }}"
              fi
              LATEST_COMMIT=$(git ls-remote "$REPO_URL" $BRANCH | cut -f1)
              TMPFILE=$(mktemp)
              curl -L "$REPO_URL/archive/$LATEST_COMMIT.tar.gz" -o "$TMPFILE"
              LATEST_HASH=$(sha256sum "$TMPFILE" | awk '{print $1}')
              rm -f "$TMPFILE"
              sed -i "s/^PKG_SOURCE_VERSION:=.*/PKG_SOURCE_VERSION:=$LATEST_COMMIT/" "$MF"
              sed -i "s/^PKG_MIRROR_HASH:=.*/PKG_MIRROR_HASH:=$LATEST_HASH/" "$MF"
              sed -i "s/^PKG_VERSION:=.*/PKG_VERSION:=1.0.$TODAY/" "$MF"
            fi
            cd - >/dev/null
          done

      - name: Compile AmneziaWG packages
        run: |
          cd openwrt
          if [ "${{ inputs.compile_go }}" = "true" ]; then
            make package/amneziawg-go/{clean,download,prepare,compile} -j $(nproc) V=s
          fi
          make package/luci-proto-amneziawg/{clean,download,prepare,compile} -j $(nproc) V=s
          make package/amneziawg-tools/{clean,download,prepare,compile} -j $(nproc) V=s

      - name: Prepare artifacts
        run: |
          mkdir awgrelease
          find "openwrt/bin/packages/${{ inputs.openwrt_arch }}/awgopenwrt" -maxdepth 1 -type f \( -name '*.ipk' -o -name '*.apk' \) -exec cp {} awgrelease \;

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: amneziawg-${{ inputs.openwrt_version }}_${{ inputs.openwrt_arch }}_${{ inputs.openwrt_target }}_${{ inputs.openwrt_subtarget }}
          path: awgrelease/*
